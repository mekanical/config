"-----
" 基本設定 base
"------------------------------
let mapleader=","                " キーマップリーダー
set scrolloff=100000               " 袖あまり
set nocompatible                   " viではないのだよ
set vb t_vb=                       " ビープはいらない
set term=ansi
set hidden                         " 編集中でも別ファイルへ
set viminfo='50,<1000,s100,\"50    " viminfoファイルの設定
set modelines=0                    " モードラインを無効
set formatoptions=lmoq             " テキスト整形オプション，マルチバイト系を追加
set backspace=indent,eol,start     " すべてを消せるバックスペース
set pastetoggle=<F12>              " ペーストモードへ
set whichwrap=b,s,h,l,<,>,[,]      " カーソルを行頭、行末で止まらないようにする
set nobackup                       " バックアップ取らない
set autoread                       " 他で書き換えられたら自動で読み直す
set noswapfile                     " スワップファイル作らない
set browsedir=buffer               " Exploreの初期ディレクトリ
syntax on                          " シンタックスをオン
colorscheme ron                    " カラースキーマを指定
highlight LineNr ctermfg=Yellow    " 行数カラー

set clipboard+=unnamed  " クリップボードを利用
set clipboard=unnamed   " ヤンク後クリップボードへ
"挿入モードでクリップボードの内容をペースト
imap <C-v> <ESC>"*pa

" たまにはマウスの話でもしよう
set mouse=a
set guioptions+=a
set ttymouse=xterm2

"-----
" 表示 display
"------------------------------
" Satus line
set laststatus=2        " 常にステータスラインを表示
set ruler               " カーソルの位置を表示
if winwidth(0) >= 120   "ステータスラインに文字コードと改行文字を表示する
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F%=[%{GetB()}]\ %l,%c%V%8P
else
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %f%=[%{GetB()}]\ %l,%c%V%8P
endif
"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END
function! GetB()
  let c = matchstr(getline('.'), '.', col('.') - 1)
  let c = iconv(c, &enc, &fenc)
  return String2Hex(c)
endfunction
" help eval-examples
" The function Nr2Hex() returns the Hex string of a number.
func! Nr2Hex(nr)
  let n = a:nr
  let r = ""
  while n
    let r = '0123456789ABCDEF'[n % 16] . r
    let n = n / 16
  endwhile
  return r
endfunc
" The function String2Hex() converts each character in a string to a two
" character Hex string.
func! String2Hex(str)
  let out = ''
  let ix = 0
  while ix < strlen(a:str)
    let out = out . Nr2Hex(char2nr(a:str[ix]))
    let ix = ix + 1
  endwhile
  return out
endfunc

set number        " 行を表示
set showmatch     " 対応した括弧をハイライト
set list          " 不可視文字の表示（スペースとかタブとか）
set listchars=tab:.>,trail:~,extends:>,precedes:< " 見えない文字の表示形式
set cmdheight=2
set title
set linespace=2
set showcmd             " コマンドをステータス行に表示
set showmode            " 現在のモードを表示
set formatoptions=lmoq  " テキスト整形オプション，マルチバイト系を追加
set display+=lastline   " 画面最後の行をできる限り表示する．
set display=uhex        " 印字不能文字を16進で表示
set cursorline          " カーソル行をハイライト
set textwidth=0         " 一行に長い文章を書いても自動折り返しはしない
set wrap                " 長い行はウィンドウ端で折り返す
set lazyredraw          " コマンド実行中は再描画しない
set ttyfast             " 高速ターミナル接続を行う

" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END
:hi clear CursorLine
:hi CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black
" 全角スペースを表示 -----
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=darkgrey gui=underline guifg=darkgrey
  silent! match ZenkakuSpace /　/
endfunction
if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd VimEnter,BufEnter * call ZenkakuSpace()
  augroup END
endif


"-----
" インデント Indent
"------------------------------
set autoindent   "自動でインデント
set smartindent  " 新しい行を現在のインデント同量で飾ってくれる
set cindent      " Cプログラムファイルの自動インデントを始める
"set paste " ペースト時にautoindentを無効に(onにするとautocomplpop.vimが動かない)
" softtabstopはTabキー押し下げ時の挿入される空白の量，0の場合はtabstopと同じ，BSにも影響する
set tabstop=2 shiftwidth=2 softtabstop=0
set expandtab   "タブは死んでも使わない
set smarttab    "行とのスペースの数をshiftwidthに
set shiftround  "インデントをよしなにする

if has("autocmd")
"ファイルタイプの検索を有効にする
  filetype plugin on
"そのファイルタイプにあわせたインデントを利用する
  filetype indent on
" これらのftではインデントを無効に
"autocmd FileType php filetype indent off

  autocmd FileType html :set indentexpr=
  autocmd FileType xhtml :set indentexpr=
endif

"-----
" 補完関連 complement
"------------------------------
set wildmenu           " コマンド補完を強化
set wildchar=<tab>     " コマンド補完を開始するキー
set wildmode=list:full " リスト表示，最長マッチ
set history=1000       " コマンド・検索パターンの履歴数
set complete+=k        " 補完に辞書ファイル追加

"<c-space>でomni補完
imap <c-space> <c-x><c-o>

"tabでオムニ補完
function! InsertTabWrapper()
  if pumvisible()
    return "\<c-n>"
  endif
  let col = col('.') - 1
  if !col || getline('.')[col -1] !~ '\k\|<\|/'
    return "\<tab>"
  elseif exists('&omnifunc') && &omnifunc == ''
    return "\<c-n>"
  else
    return "\<c-x>\<c-o>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>


"-----
" 検索関連 search
"------------------------------
set wrapscan    " 最後まで検索したら先頭へ戻る
set ignorecase  " 大文字小文字区別しない
set smartcase   " でも，ときには区別して欲しい
set incsearch   " インクリメンタルサーチ
set hlsearch    " 検索文字をハイライト
"Escの2回押しでハイライト消去
nnoremap <ESC><ESC> :<C-u>nohlsearch<CR><ESC>

"選択した文字列を検索
vnoremap <silent> // y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
"選択した文字列を置換
vnoremap /r "xy;%s/<C-R>=escape(@x, '\\/.*$^~[]')<CR>//gc<Left><Left><Left>

"s*置換後文字列/g<Cr>でカーソル下のキーワードを置換
nnoremap <expr> s* ':%substitute/\<' . expand('<cword>') . '\>/'

"help me
nnoremap <C-h>  :<C-u>help<Space>
" カーソル下のキーワードをヘルプでひく
nnoremap <C-h><C-h> :<C-u>help<Space><C-r><C-w><Enter>

" :Gb <args> でGrepBufferする
command! -nargs=1 Gb :GrepBuffer <args>
" カーソル下の単語をGrepBufferする
nnoremap <C-g><C-b> :<C-u>GrepBuffer<Space><C-r><C-w><Enter>


"-----
" エクスプローラ&バッファ＆ウィンドウ関連 explorer buffer window
"------------------------------
"バッファ buffer
nnoremap <Leader>bb :<C-u>ls<CR>:<C-u>buffer
nnoremap <Leader>BB :<C-u>buffers!<CR>
nnoremap <Leader>bn :<C-u>bnext<CR>
noremap <F2> :<C-u>bnext<CR>
noremap <C-Tab> :<C-u>bnext<CR>
nnoremap <Leader>bp :<C-u>bprevious<CR>
noremap <F3> :<C-u>bprevious<CR>
noremap <C-S-Tab> :<C-u>bprevious<CR>
nnoremap <Leader>bf :<C-u>bfirst<CR>
nnoremap <Leader>bl :<C-u>blast<CR>
nnoremap <Leader>br :<C-u>bdelete<CR>
nnoremap <Leader>bR :<C-u>bwipeout<CR>
"ウィンドウ window
nnoremap <Leader>ww <C-w>w
nnoremap <Leader>WW <C-w>p
nnoremap <Leader>ws :<C-u>split<CR>
nnoremap <Leader>wv :<C-u>vsplit<CR>
nnoremap <Leader>wr :<C-u>close<CR>
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wl <C-w>l
nnoremap + <C-w>+
nnoremap - <C-w>-
nnoremap < <C-w><
nnoremap > <C-w>>


"-----
" 移動系の設定 move
"------------------------------
"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap h <Left>
nnoremap l <Right>
"l を <Right>に置き換えて、折りたたみを l で開くことができるようにする。
if has('folding')
  nnoremap <expr> l foldlevel(line('.')) ? "\<Right>zo" : "\<Right>"
endif
"Home End
" noremap <C-a> <Home>
noremap <C-e> <End>
"インサートモードでも移動したいやん
"emacs風な感じで移動
inoremap <C-p>  <Up>
inoremap <C-n> <Down>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
"Home End
inoremap <C-a> <Home>
inoremap <C-e> <End>
"スクロールなキーバインド
noremap K <C-u>
noremap J <C-d>
" 前回終了したカーソル行に移動
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
" 最後に編集された位置に移動
nnoremap gb '[
nnoremap gp ']
" 対応する括弧に移動
nnoremap [ %
nnoremap ] %
" 最後に変更されたテキストを選択する
nnoremap gc `[v`]
vnoremap gc <C-u>normal gc<Enter>
onoremap gc <C-u>normal gc<Enter>
" 矩形選択で自由に移動する
set virtualedit+=block


"-----
" 編集 edit
"------------------------------
" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
" コンマの後に自動的にスペースを挿入
inoremap , ,<Space>
" XMLの閉タグを自動挿入
augroup MyXML
  autocmd!
  autocmd Filetype xml inoremap <buffer> </ </<C-x><C-o>
augroup END
" Insert mode中で単語単位/行単位の削除をアンドゥ可能にする
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>
" 括弧を自動補完
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
" inoremap " ""<LEFT>
inoremap ' ''<LEFT>
vnoremap { "zdi^V{<C-R>z}<ESC>
vnoremap [ "zdi^V[<C-R>z]<ESC>
vnoremap ( "zdi^V(<C-R>z)<ESC>
vnoremap " "zdi^V"<C-R>z^V"<ESC>
vnoremap ' "zdi'<C-R>z'<ESC>
" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" 保存時にtabをスペースに変換する
autocmd BufWritePre * :%s/\t/ /ge
" 日時の自動入力
inoremap <expr> \df strftime('%Y/%m/%d %H:%M:%S')
inoremap <expr> \dd strftime('%Y/%m/%d')
inoremap <expr> \dt strftime('%H:%M:%S')
"ノーマルモード中でも改行とスペースとカンマを入力
noremap <CR> i<CR><ESC>
noremap <Leader><Space> i<Space><Right><ESC>
noremap <Leader><Leader> i,<Right><ESC>

"-----
" キーバインド keybind
"------------------------------
"文字消し
noremap <C-d> <Delete>
inoremap <C-d> <Delete>
inoremap <C-h> <Backspace>
"redoの設定
nnoremap U :<C-u>redo<CR>
"Makeしようぜ！
noremap <silent> <Leader>m :<C-u>make<CR>
"保存&終了
nnoremap <silent> <Leader>w :<C-u>write<CR>
nnoremap <silent> <Leader>W :<C-u>write!<CR>
nnoremap <silent> <Leader>q :<C-u>quit<CR>
nnoremap <silent> <Leader>Q :<C-u>quit!<CR>
nnoremap <silent> <Leader>wq :<C-u>write<CR>:<C-u>quit<CR>
nnoremap <silent> <Leader>WQ :<C-u>write!<CR>:<C-u>quit!<CR>

".vimrc & .gvimrc へのアクセス
nnoremap <silent> <Leader>ev :<C-u>edit $MYVIMRC<CR>
nnoremap <silent> <Leader>eg  :<C-u>edit $MYGVIMRC<CR>

".vimrc & .gvimrc をリロード
nnoremap <silent> <Leader>rv :<C-u>source $MYVIMRC \| if has('gui_running') \| source $MYGVIMRC \| endif <CR>
nnoremap <silent> <Leader>rg :<C-u>source $MYGVIMRC<CR>


"-----
" カラー関連 colors
"------------------------------
"ターミナルタイプによるカラー設定
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86" || &term =~ "xterm-256color"
 set t_Co=16
 set t_Sf=[3%dm
 set t_Sb=[4%dm
elseif &term =~ "xterm-color"
 set t_Co=8
 set t_Sf=[3%dm
 set t_Sb=[4%dm
endif
"ポップアップメニューのカラーを設定
hi Pmenu guibg=#666666
hi PmenuSel guibg=#8cd0d3 guifg=#666666
hi PmenuSbar guibg=#333333
" ハイライト on
syntax enable
" 補完候補の色づけ for vim7
hi Pmenu ctermbg=white ctermfg=darkgray
hi PmenuSel ctermbg=blue ctermfg=white
hi PmenuSbar ctermbg=0 ctermfg=9


"-----
" プラグイン関連 plugin
"------------------------------
"vim-pathogen ----------
filetype off " pathogenでftdetectなどをloadさせるために一度ファイルタイプ判定をoff
call pathogen#runtime_append_all_bundles() " pathogen.vimによってbundle配下のpluginをpathに加える
" call pathogen#helptags()
set helpfile=$VIMRUNTIME/doc/help.txt
filetype plugin on " ファイルタイプ判定をon

"unite ----------
nmap <Leader>uf :<C-u>Unite -buffer-name=files file<CR>
nmap <Leader>ub :<C-u>Unite buffer<CR>
nmap <Leader>ur :<C-u>Unite file_mru<CR>
let g:unite_source_file_mru_limit = 200
" autocmd FileType unite call s:unite_my_settings()
" function! s:unite_my_settings()"{{{
" " Overwrite settings.
  " imap <buffer> jj <Plug>(unite_insert_leave)
  " nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  " imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
" " Start insert.
  " let g:unite_enable_start_insert = 1
" endfunction"}}}

"VTreeExplorer ----------
let g:treeExplVertical=1
let g:treeExplWinSize=30
nnoremap <Leader>ee :<C-u>VSTreeExplore<CR>

"MiniBufExplorer ----------
"set minibfexp
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplSplitBelow=0 " Put new window above
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplSplitToEdge=1
let g:miniBufExplMaxSize = 10
let g:miniBufExplMapCTabSwitchBuffs = 1
":TmでMiniBufExplorerの表示トグル
command! Mt :TMiniBufExplorer

" DumbBuf.vim
" <Leader>b<Space>でBufferList
" let dumbbuf_hotkey = '<Leader>b<Space>'
" let dumbbuf_mappings = {
    " \ 'n': {
        " \'<Esc>': { 'opt': '<silent>', 'mapto': ':<C-u>close<CR>' }
    " \}
" \}
" let dumbbuf_single_key = 1
" let dumbbuf_updatetime = 1 &updatetimeの最小値
" let dumbbuf_wrap_cursor = 0
" let dumbbuf_remove_marked_when_close = 1


"yankring ----------
nmap <Leader>yr :<C-u>YRShow<CR>

" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"neocomplcache ----------
let g:neocomplcache_enable_at_startup = 1
" " smarrt case有効化。 大文字が入力されるまで大文字小文字の区別を無視する
" let g:neocomplcache_enable_smart_case = 1
" " camle caseを有効化。大文字を区切りとしたワイルドカードのように振る舞う
" let g:neocomplcache_enable_camel_case_completion = 1
" " _(アンダーバー)区切りの補完を有効化
" let g:neocomplcache_enable_underbar_completion = 1
" " シンタックスをキャッシュするときの最小文字長を3に
" let g:neocomplcache_min_syntax_length = 3
" " neocomplcacheを自動的にロックするバッファ名のパターン
" let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" " -入力による候補番号の表示
" let g:neocomplcache_enable_quick_match = 1
" " 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
" let g:neocomplcache_enable_auto_select = 1
"
" " Define dictionary.
" let g:neocomplcache_dictionary_filetype_lists = {
" \ 'default' : '',
" \ 'vimshell' : $HOME.'/.vimshell_hist',
" \ 'scala' : $HOME.'/.vim/bundle/vim-scala/dict/scala.dict',
" \ 'java' : $HOME.'/.vim/dict/java.dict',
" \ 'c' : $HOME.'/.vim/dict/c.dict',
" \ 'cpp' : $HOME.'/.vim/dict/cpp.dict',
" \ 'javascript' : $HOME.'/.vim/dict/javascript.dict',
" \ 'ocaml' : $HOME.'/.vim/dict/ocaml.dict',
" \ 'perl' : $HOME.'/.vim/dict/perl.dict',
" \ 'php' : $HOME.'/.vim/dict/php.dict',
" \ 'scheme' : $HOME.'/.vim/dict/scheme.dict',
" \ 'vm' : $HOME.'/.vim/dict/vim.dict'
" \ }
"
" " Define keyword.
" " if !exists('g:neocomplcache_keyword_patterns')
" " let g:neocomplcache_keyword_patterns = {}
" " endif
" " let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
"
" " ユーザー定義スニペット保存ディレクトリ
" let g:neocomplcache_snippets_dir = $HOME.'/.vim/snippets'
"
" " スニペット
" imap <C-k> <Plug>(neocomplcache_snippets_expand)
" smap <C-k> <Plug>(neocomplcache_snippets_expand)
"
" " 補完を選択しpopupを閉じる
" inoremap <expr><C-y> neocomplcache#close_popup()
" " 補完をキャンセルしpopupを閉じる
" inoremap <expr><C-e> neocomplcache#cancel_popup()
" " TABで補完できるようにする
" inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" " undo
" inoremap <expr><C-g> neocomplcache#undo_completion()
" " 補完候補の共通部分までを補完する
" inoremap <expr><C-l> neocomplcache#complete_common_string()
" " SuperTab like snippets behavior.
" imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
" " C-kを押すと行末まで削除
" inoremap <C-k> <C-o>D
" " C-nでneocomplcache補完
" inoremap <expr><C-n> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" " C-pでkeyword補完
" inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
" " 補完候補が出ていたら確定、なければ改行
" inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "<CR>"
"
" " <TAB>: completion.
" inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
" inoremap <expr><C-x><C-o> &filetype == 'vim' ? "\<C-x><C-v><C-p>" : neocomplcache#manual_omni_complete()
"
" " FileType毎のOmni補完を設定
" autocmd FileType python set omnifunc=pythoncomplete#Complete
" autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" autocmd FileType c set omnifunc=ccomplete#Complete
" autocmd FileType ruby set omnifunc=rubycomplete#Complete
"
" " Enable heavy omni completion.
" if !exists('g:neocomplcache_omni_patterns')
" let g:neocomplcache_omni_patterns = {}
" endif
" let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
" let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

"smartchr
inoremap <expr> = smartchr#one_of(' = ', ' == ', ' === ', '=')
autocmd FileType csh,vim inoremap <buffer> <expr> = smartchr#one_of('=', '==', '===', '=')
" " 演算子の間に空白を入れる
" inoremap <buffer><expr> + smartchr#one_of(' + ', ' ++ ', '+')
" inoremap <buffer><expr> += smartchr#one_of(' += ')
" " inoremap <buffer><expr> - smartchr#one_of(' - ', ' -- ', '-')
" inoremap <buffer><expr> -= smartchr#one_of(' -= ')
" " inoremap <buffer><expr> / smartchr#one_of(' / ', ' // ', '/')
" inoremap <buffer><expr> /= smartchr#one_of(' /= ')
" inoremap <buffer><expr> * smartchr#one_of(' * ', ' ** ', '*')
" inoremap <buffer><expr> *= smartchr#one_of(' *= ')
" inoremap <buffer><expr> & smartchr#one_of(' & ', ' && ', '&')
" inoremap <buffer><expr> % smartchr#one_of(' % ', '%')
" inoremap <buffer><expr> => smartchr#one_of(' => ')
" inoremap <buffer><expr> <- smartchr#one_of(' <- ')
" inoremap <buffer><expr> <Bar> smartchr#one_of(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
" inoremap <buffer><expr> , smartchr#one_of(', ', ',')
" " 3項演算子の場合は、後ろのみ空白を入れる
" inoremap <buffer><expr> ? smartchr#one_of('? ', '?')
" " inoremap <buffer><expr> : smartchr#one_of(': ', '::', ':')

" " =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
" " 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
" inoremap <buffer><expr> = search('¥(&¥<bar><bar>¥<bar>+¥<bar>-¥<bar>/¥<bar>>¥<bar><¥) ¥%#', 'bcn')? '<bs>= ' : search('¥(*¥<bar>!¥)¥%#', 'bcn') ? '= ' : smartchr#one_of(' = ', ' == ', '=')

" " 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
" inoremap <buffer><expr> } smartchr#one_of('}', '}<cr>')
" inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>')
" "()は空白入れる
" inoremap <buffer><expr> ( smartchr#one_of('( ')
" inoremap <buffer><expr> ) smartchr#one_of(' )')

" " if文直後の(は自動で間に空白を入れる
" inoremap <buffer><expr> ( search('¥<¥if¥%#', 'bcn')? ' (': '('

" surround.vim
" s, ssで選択範囲を指定文字でくくる
" nmap s <Plug>Ysurround
" nmap ss <Plug>Yssurround

"NERD_Commenter
let g:NERDCreateDefaultMappings = 0  " 勝手なキーバインドはやめてよね！
let g:NERDSpaceDelims = 1            " コメントの間にスペースを入れる
map <C-r> <Plug>NERDCommenterToggle
"未対応ファイルタイプのエラーメッセージを表示しない
" let NERDShutUp=1

"Operator-replace
map <Leader>rr <Plug>(operator-replace)
vmap p <Plug>(operator-replace)

"vimshell
nmap <Leader>vs :<C-u>VimShellPop /Users/mekanical<CR>
let g:vimshell_prompt = $uSER. "$"
let g:vimshell_user_prompt  =  'fnamemodify(getcwd(),  ":~")'
let g:vimshell_right_prompt  =  'vimshell#vcs#info("(%s)-[%b]",  "(%s)-[%b|%a]")'
let g:vimshell_ignore_case = 1
let g:vimshell_smart_case = 1

" function! g:my_chpwd(args, context)
  " call vimshell#execute('echo "chpwd"')
" endfunction
" function! g:my_emptycmd(cmdline, context)
  " call vimshell#execute('echo "emptycmd"')
  " return a:cmdline
" endfunction
" function! g:my_preprompt(args, context)
  " call vimshell#execute('echo "preprompt"')
" endfunction
" function! g:my_preexec(cmdline, context)
  " call vimshell#execute('echo "preexec"')

  " if a:cmdline =~# '^\s*diff\>'
    " call vimshell#set_syntax('diff')
  " endif
  " return a:cmdline
" endfunction

" autocmd FileType vimshell
" \ call vimshell#altercmd#define('g', 'git')
" \| call vimshell#altercmd#define('i', 'iexe')
" \| call vimshell#altercmd#define('l', 'll')
" \| call vimshell#altercmd#define('ll', 'ls -l')
" \| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
" \| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
" \| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
" \| call vimshell#hook#set('preexec', ['g:my_preexec'])

" grep.vim
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'

" open-blowser.vim
" カーソル下のURLをブラウザで開く
nmap fu <Plug>(openbrowser-open)
vmap fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
"プラグインとヘルプのウィンドウは簡単クローズな感じで
autocmd FileType help,unite,quickrun nnoremap <buffer> qq <C-w>c


" vim hacks #181
" Open junk file."{{{
command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
  let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
  if !isdirectory(l:junk_dir)
    call mkdir(l:junk_dir, 'p')
  endif
  let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'edit ' . l:filename
  endif
endfunction "}}}
nnoremap ,jk :<C-u>JunkFile<CR>


"-----
" プラットフォームごとの設定
"------------------------------
if has('win32')
  " for windows
elif has('mac')
  " for mac
else
  " for others
endif

if has('ruby')
  " using ruby interface
endif


"-----
" 個別設定のインクルード
"------------------------------
if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif


" ------------------------------------------------
" encoding
" > http://www.kawaz.jp/pukiwiki/?vim#cb691f26
" ------------------------------------------------
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif

if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
    " iconvがJISX0213に対応しているかをチェック
  endif

  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif

" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif

" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

